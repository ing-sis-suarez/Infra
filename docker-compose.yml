version: '3'

services:

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot/ --force-renewal --email jorge.suarez@ing.austral.edu.ar -d ing-sis-org.casacam.net --agree-tos

  proxy:
    container_name: "reverse-proxy"
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - db-roles
      - roles
      - snippet-manager
      - db-snippet-manager

  redis:
    container_name: "redis"
    image: redis:6-alpine
    expose:
      - "6379"

  runner:
    image: ghcr.io/ing-sis-suarez/runner-dev:latest
    expose:
      - '8080'
    environment:
      DD_APIKEY: ${DD_APIKEY}
      ROLES_URI: ${ROLES_URI}
      SERVER_PORT: 8080
      USERNAME: ${USERNAME}
      TOKEN: ${TOKEN}
      REDIS_STREAM_LINTER_KEY: uwu
      REDIS_GROUPS_LINT: uwuwu
      REDIS_STREAM_FORMATER_KEY: awa
      REDIS_GROUPS_FORMAT: awawa
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SNIPPET_MANAGER_URI: ${SNIPPET_MANAGER_URI}
    depends_on:
      - redis
    labels:
      com.datadoghq.ad.logs: '[{"source": "java", "service": "api", "log_processing_rules": [{"type": "multi_line", "name": "log_start_with_date", "pattern" : "\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])"}]}]'


  snippet-manager:
    image: ghcr.io/ing-sis-suarez/snippet-manager-dev:latest
    expose:
      - '8080'
    environment:
      USERNAME: ${USERNAME}
      TOKEN: ${TOKEN}
      DD_APIKEY: ${DD_APIKEY}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      ROLES_URI: ${ROLES_URI}
      DB_HOST: db-snippet-manager
      DB_NAME: snippet-manager
      DB_PORT: 5432
      REDIS_STREAM_LINTER_KEY: uwu
      REDIS_GROUPS_LINT: uwuwu
      REDIS_STREAM_FORMATER_KEY: awa
      REDIS_GROUPS_FORMAT: awawa
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RUNNER_URI: ${RUNNER_URI}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
    depends_on:
      - db-snippet-manager
      - redis
    labels:
      com.datadoghq.ad.logs: '[{"source": "java", "service": "api", "log_processing_rules": [{"type": "multi_line", "name": "log_start_with_date", "pattern" : "\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])"}]}]'

  db-snippet-manager:
    image: postgres:alpine
    container_name: db-snippet-manager
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: snippet-manager
    expose:
      - '5432'
    command:
      - -p 5432
    volumes:
      - db-data:/var/lib/postgresql/snippet-manager
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 1s
      timeout: 1s
      retries: 15


  roles:
    image: ghcr.io/ing-sis-suarez/roles-dev:latest
    expose:
      - '8080'
    environment:
      DD_APIKEY: ${DD_APIKEY}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: db-roles
      DB_NAME: roles
      DB_PORT: 5433
    depends_on:
      - db-roles
    labels:
      com.datadoghq.ad.logs: '[{"source": "java", "service": "api", "log_processing_rules": [{"type": "multi_line", "name": "log_start_with_date", "pattern" : "\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])"}]}]'


  db-roles:
    image: postgres:alpine
    container_name: db-roles
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: roles
    expose:
      - '5433'
    command:
      - -p 5433
    volumes:
      - db-data:/var/lib/postgresql/roles
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 1s
      timeout: 1s
      retries: 15

  datadog:
    image: datadog/agent
    environment:
      - DD_API_KEY=${DD_APIKEY}
      - DD_SITE=us5.datadoghq.com
      - DD_LOGS_ENABLED=true
      - DD_APM_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro

volumes:
  db-data:
